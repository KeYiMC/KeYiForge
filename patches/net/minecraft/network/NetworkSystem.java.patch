--- ../src-base/minecraft/net/minecraft/network/NetworkSystem.java
+++ ../src-work/minecraft/net/minecraft/network/NetworkSystem.java
@@ -41,6 +41,7 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.threadly.concurrent.collections.ConcurrentArrayList;
 
 public class NetworkSystem
 {
@@ -49,27 +50,20 @@
     {
         protected NioEventLoopGroup load()
         {
-            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
         }
     };
     public static final LazyLoadBase<EpollEventLoopGroup> SERVER_EPOLL_EVENTLOOP = new LazyLoadBase<EpollEventLoopGroup>()
     {
         protected EpollEventLoopGroup load()
         {
-            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
         }
     };
-    public static final LazyLoadBase<LocalEventLoopGroup> SERVER_LOCAL_EVENTLOOP = new LazyLoadBase<LocalEventLoopGroup>()
-    {
-        protected LocalEventLoopGroup load()
-        {
-            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
-        }
-    };
     private final MinecraftServer mcServer;
     public volatile boolean isAlive;
-    private final List<ChannelFuture> endpoints = Collections.<ChannelFuture>synchronizedList(Lists.newArrayList());
-    private final List<NetworkManager> networkManagers = Collections.<NetworkManager>synchronizedList(Lists.newArrayList());
+    private final List<ChannelFuture> endpoints = Lists.newCopyOnWriteArrayList();
+    private final List<NetworkManager> networkManagers = new ConcurrentArrayList<>();
 
     public NetworkSystem(MinecraftServer server)
     {
@@ -77,69 +71,49 @@
         this.isAlive = true;
     }
 
-    public void addLanEndpoint(InetAddress address, int port) throws IOException
-    {
-        synchronized (this.endpoints)
-        {
-            Class <? extends ServerSocketChannel > oclass;
-            LazyLoadBase <? extends EventLoopGroup > lazyloadbase;
+    public void addLanEndpoint(InetAddress address, int port) throws IOException {
+        if (address instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
+        Class<? extends ServerSocketChannel> oclass;
+        LazyLoadBase<? extends EventLoopGroup> lazyloadbase;
 
-            if (Epoll.isAvailable() && this.mcServer.shouldUseNativeTransport())
-            {
-                oclass = EpollServerSocketChannel.class;
-                lazyloadbase = SERVER_EPOLL_EVENTLOOP;
-                LOGGER.info("Using epoll channel type");
-            }
-            else
-            {
-                oclass = NioServerSocketChannel.class;
-                lazyloadbase = SERVER_NIO_EVENTLOOP;
-                LOGGER.info("Using default channel type");
-            }
+        if (Epoll.isAvailable() && this.mcServer.shouldUseNativeTransport()) {
+            oclass = EpollServerSocketChannel.class;
+            lazyloadbase = SERVER_EPOLL_EVENTLOOP;
+            LOGGER.info("Using epoll channel type");
+        } else {
+            oclass = NioServerSocketChannel.class;
+            lazyloadbase = SERVER_NIO_EVENTLOOP;
+            LOGGER.info("Using default channel type");
+        }
 
-            this.endpoints.add(((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer<Channel>()
-            {
-                protected void initChannel(Channel p_initChannel_1_) throws Exception
-                {
-                    try
-                    {
-                        p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
-                    }
-                    catch (ChannelException var3)
-                    {
-                        ;
-                    }
-
-                    p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(NetworkSystem.this)).addLast("splitter", new NettyVarint21FrameDecoder()).addLast("decoder", new NettyPacketDecoder(EnumPacketDirection.SERVERBOUND)).addLast("prepender", new NettyVarint21FrameEncoder()).addLast("encoder", new NettyPacketEncoder(EnumPacketDirection.CLIENTBOUND));
-                    NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
-                    NetworkSystem.this.networkManagers.add(networkmanager);
-                    p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
-                    networkmanager.setNetHandler(new NetHandlerHandshakeTCP(NetworkSystem.this.mcServer, networkmanager));
+        this.endpoints.add((new ServerBootstrap()).channel(oclass).childHandler(new ChannelInitializer<Channel>() {
+            protected void initChannel(Channel p_initChannel_1_) {
+                try {
+                    p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
+                } catch (ChannelException var3) {
+                    ;
                 }
-            }).group(lazyloadbase.getValue()).localAddress(address, port)).bind().syncUninterruptibly());
-        }
+
+                p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.READ_TIMEOUT)).addLast("legacy_query", new LegacyPingHandler(NetworkSystem.this)).addLast("splitter", new NettyVarint21FrameDecoder()).addLast("decoder", new NettyPacketDecoder(EnumPacketDirection.SERVERBOUND)).addLast("prepender", new NettyVarint21FrameEncoder()).addLast("encoder", new NettyPacketEncoder(EnumPacketDirection.CLIENTBOUND));
+                NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
+                NetworkSystem.this.networkManagers.add(networkmanager);
+                p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
+                networkmanager.setNetHandler(new NetHandlerHandshakeTCP(NetworkSystem.this.mcServer, networkmanager));
+            }
+        }).group(lazyloadbase.getValue()).localAddress(address, port).bind().syncUninterruptibly());
     }
 
     @SideOnly(Side.CLIENT)
-    public SocketAddress addLocalEndpoint()
-    {
-        ChannelFuture channelfuture;
-
-        synchronized (this.endpoints)
-        {
-            channelfuture = ((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(LocalServerChannel.class)).childHandler(new ChannelInitializer<Channel>()
-            {
-                protected void initChannel(Channel p_initChannel_1_) throws Exception
-                {
-                    NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
-                    networkmanager.setNetHandler(new NetHandlerHandshakeMemory(NetworkSystem.this.mcServer, networkmanager));
-                    NetworkSystem.this.networkManagers.add(networkmanager);
-                    p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
-                }
-            }).group(SERVER_NIO_EVENTLOOP.getValue()).localAddress(LocalAddress.ANY)).bind().syncUninterruptibly();
-            this.endpoints.add(channelfuture);
-        }
-
+    public SocketAddress addLocalEndpoint() {
+        ChannelFuture channelfuture = (new ServerBootstrap()).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<Channel>() {
+            protected void initChannel(Channel p_initChannel_1_) {
+                NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
+                networkmanager.setNetHandler(new NetHandlerHandshakeMemory(NetworkSystem.this.mcServer, networkmanager));
+                NetworkSystem.this.networkManagers.add(networkmanager);
+                p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
+            }
+        }).group(SERVER_NIO_EVENTLOOP.getValue()).localAddress(LocalAddress.ANY).bind().syncUninterruptibly();
+        this.endpoints.add(channelfuture);
         return channelfuture.channel().localAddress();
     }
 
@@ -160,57 +134,40 @@
         }
     }
 
-    public void networkTick()
-    {
-        synchronized (this.networkManagers)
-        {
-            Iterator<NetworkManager> iterator = this.networkManagers.iterator();
+    public void networkTick() {
+        // Spigot Start
+        // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+        if (org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0) {
+            Collections.shuffle(this.networkManagers);
+        }
+        // Spigot End
+        Iterator<NetworkManager> iterator = this.networkManagers.iterator();
 
-            while (iterator.hasNext())
-            {
-                final NetworkManager networkmanager = iterator.next();
-
-                if (!networkmanager.hasNoChannel())
-                {
-                    if (networkmanager.isChannelOpen())
-                    {
-                        try
-                        {
-                            networkmanager.processReceivedPackets();
+        while (iterator.hasNext()) {
+            final NetworkManager networkmanager = iterator.next();
+            if (!networkmanager.hasNoChannel()) {
+                if (networkmanager.isChannelOpen()) {
+                    try {
+                        networkmanager.processReceivedPackets();
+                    } catch (Exception exception) {
+                        if (networkmanager.isLocalChannel()) {
+                            CrashReport crashreport = CrashReport.makeCrashReport(exception, "Ticking memory connection");
+                            CrashReportCategory crashreportcategory = crashreport.makeCategory("Ticking connection");
+                            crashreportcategory.addDetail("Connection", () -> networkmanager.toString());
+                            throw new ReportedException(crashreport);
                         }
-                        catch (Exception exception)
-                        {
-                            if (networkmanager.isLocalChannel())
-                            {
-                                CrashReport crashreport = CrashReport.makeCrashReport(exception, "Ticking memory connection");
-                                CrashReportCategory crashreportcategory = crashreport.makeCategory("Ticking connection");
-                                crashreportcategory.addDetail("Connection", new ICrashReportDetail<String>()
-                                {
-                                    public String call() throws Exception
-                                    {
-                                        return networkmanager.toString();
-                                    }
-                                });
-                                throw new ReportedException(crashreport);
-                            }
 
-                            LOGGER.warn("Failed to handle packet for {}", networkmanager.getRemoteAddress(), exception);
-                            final TextComponentString textcomponentstring = new TextComponentString("Internal server error");
-                            networkmanager.sendPacket(new SPacketDisconnect(textcomponentstring), new GenericFutureListener < Future <? super Void >> ()
-                            {
-                                public void operationComplete(Future <? super Void > p_operationComplete_1_) throws Exception
-                                {
-                                    networkmanager.closeChannel(textcomponentstring);
-                                }
-                            });
-                            networkmanager.disableAutoRead();
-                        }
+                        LOGGER.warn("Failed to handle packet for {}", networkmanager.getRemoteAddress(), exception);
+                        final TextComponentString textcomponentstring = new TextComponentString("Internal server error");
+                        networkmanager.sendPacket(new SPacketDisconnect(textcomponentstring), p_operationComplete_1_ -> networkmanager.closeChannel(textcomponentstring));
+                        networkmanager.disableAutoRead();
                     }
-                    else
-                    {
-                        iterator.remove();
-                        networkmanager.checkDisconnected();
-                    }
+                } else {
+                    // Spigot Start - Fix a race condition where a NetworkManager could be unregistered just before connection.
+                    if (networkmanager.preparing) continue;
+                    // Spigot End
+                    iterator.remove();
+                    networkmanager.checkDisconnected();
                 }
             }
         }
